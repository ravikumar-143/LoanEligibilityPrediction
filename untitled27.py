# -*- coding: utf-8 -*-
"""Untitled27.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1v9RjAiCD4w3XovP6uDupSLXj1nxlcYA6
"""

# Commented out IPython magic to ensure Python compatibility.
import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
# %matplotlib inline

data = pd.read_csv('/content/loan-train.csv')

data.head()

data.shape

data.info()

data.describe()

pd.crosstab(data['Credit_History'],data['Loan_Status'],margins = True)

data.boxplot(column = 'ApplicantIncome')

data['ApplicantIncome'].hist(bins=20)

data.boxplot(column='ApplicantIncome',by='Education')

data.boxplot(column = 'LoanAmount')

data['LoanAmount'].hist(bins=20)

data['LoanAmount_log']=np.log(data['LoanAmount'])
data['LoanAmount_log'].hist(bins=20)

data.isnull()

data.isnull().sum()

data['Gender'].fillna(data['Gender'].mode()[0],inplace= True)

data['Married'].fillna(data['Married'].mode()[0],inplace= True)

data['Dependents'].fillna(data['Dependents'].mode()[0],inplace= True)

data['Self_Employed'].fillna(data['Self_Employed'].mode()[0],inplace= True)

data.LoanAmount = data.LoanAmount.fillna(data.LoanAmount.mean())
data.LoanAmount_log = data.LoanAmount_log.fillna(data.LoanAmount_log.mean())

data['Loan_Amount_Term'].fillna(data['Loan_Amount_Term'].mode()[0],inplace= True)

data['Credit_History'].fillna(data['Credit_History'].mode()[0],inplace= True)

data.isnull().sum()

data['TotalIncome'] = data['ApplicantIncome'] + data['CoapplicantIncome']
data['TotalIncome_log'] = np.log(data['TotalIncome'])

data['TotalIncome_log'].hist(bins=20)

data.head()

x = data.iloc[:,np.r_[1:5,9:11,13:15]].values
y = data.iloc[:,12].values

x

y

from sklearn.model_selection import train_test_split
x_train,x_test,y_train,y_test = train_test_split(x,y,test_size= 0.2)

print(x_train)

from sklearn.preprocessing import LabelEncoder
labelencoder_x = LabelEncoder()

for i in range(0,5):
  x_train[:,i] = labelencoder_x.fit_transform(x_train[:,i])

x_train[:,7] = labelencoder_x.fit_transform(x_train[:,7])

x_train

labelencoder_y = LabelEncoder()
y_train = labelencoder_y.fit_transform(y_train)

y_train

for i in range(0,5):
  x_test[:,i] = labelencoder_x.fit_transform(x_test[:,i])

x_test[:,7] = labelencoder_x.fit_transform(x_test[:,7])

x_test

labelencoder_y = LabelEncoder()
y_test = labelencoder_y.fit_transform(y_test)

x_test

y_test

from sklearn.preprocessing import StandardScaler
sc = StandardScaler()
x_train = sc.fit_transform(x_train)
x_test = sc.fit_transform(x_test)

from sklearn.tree import DecisionTreeClassifier
DTClassifier = DecisionTreeClassifier(criterion = 'entropy',random_state = 0)
DTClassifier.fit(x_train,y_train)

y_pred = DTClassifier.predict(x_test)
y_pred

from sklearn import metrics
print('The accuracy of decision tree is : ' , metrics.accuracy_score(y_pred,y_test))

from sklearn.naive_bayes import GaussianNB
NBclassifier = GaussianNB()
NBclassifier.fit(x_train, y_train)

y_pred = NBclassifier.predict(x_test)
y_pred

print('The accuracy of Navie Bayes is : ',metrics.accuracy_score(y_pred,y_test))

testdata  = pd.read_csv('/content/loan-train.csv')

testdata.head()

testdata.info()

testdata.isnull().sum()

testdata['Gender'].fillna(testdata['Gender'].mode()[0],inplace= True)
testdata['Dependents'].fillna(testdata['Dependents'].mode()[0],inplace= True)
testdata['Self_Employed'].fillna(testdata['Self_Employed'].mode()[0],inplace= True)
testdata['Loan_Amount_Term'].fillna(testdata['Loan_Amount_Term'].mode()[0],inplace= True)
testdata['Credit_History'].fillna(testdata['Credit_History'].mode()[0],inplace= True)
testdata['Married'].fillna(testdata['Married'].mode()[0],inplace= True)

testdata.isnull().sum()

testdata.boxplot(column = 'LoanAmount')

testdata.boxplot(column  = 'ApplicantIncome')

testdata.LoanAmount = testdata.LoanAmount.fillna(testdata.LoanAmount.mean())

testdata['LoanAmount_log'] = np.log(testdata['LoanAmount'])

testdata.isnull().sum()

testdata['TotalIncome'] = testdata['ApplicantIncome'] + testdata['CoapplicantIncome']
testdata['TotalIncome_log'] = np.log(testdata['TotalIncome'])

testdata.head()

test = testdata.iloc[:,np.r_[1:5,9:11,13:15]].values

for i in range(0,5):
  test[:,i] = labelencoder_x.fit_transform(test[:,i])

test[:,7] = labelencoder_x.fit_transform(test[:,7])

test

from sklearn.preprocessing import StandardScaler
ss = StandardScaler()
test = ss.fit_transform(test)

pred = NBclassifier.predict(test)

pred

